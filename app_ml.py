# -*- coding: utf-8 -*-
"""App_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H3xCEVbEp8MbeQWdbUeuVEOyCXNg9nXT

## **Carga de Librerias y Entorno de trabajo**
"""

import pandas as pd
import streamlit as st
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from scipy.sparse import csr_matrix, hstack
from sklearn.preprocessing import MinMaxScaler

# Configura la página de Streamlit
st.set_page_config(page_title="Recomendaciones Ecommerce")

"""## **Carga de Datos y definicion del Algoritmo**"""

# Capturando el Origen de datos de Google Drive
url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRrZH190awIttP9X9vv--e89O5L9MLLSzjlylm94iluGIPFY4x3jnAMUlZVLM0vtp2b48c1ZvDdOFzG/pub?gid=1891443343&single=true&output=csv"

# Carga y Lectura de la Base de datos
data = pd.read_csv(url)

# Función para el cálculo de similitud del coseno
def calcular_similitud(data):
    tfidf = TfidfVectorizer(max_features=2000)
    tfidf_matrix = tfidf.fit_transform(data['nombre'])
    scaler = MinMaxScaler()
    numerical_features = data[['precio', 'calificacion', 'cantidad_calificaciones']]
    numerical_features_scaled = scaler.fit_transform(numerical_features)
    combined_features = hstack([tfidf_matrix, numerical_features_scaled])
    cosine_sim = cosine_similarity(combined_features)
    return cosine_sim

# Calcula la similitud del coseno (solo una vez)
cosine_sim = calcular_similitud(data)

# Función para obtener las recomendaciones
def get_recommendations(nombre_producto, cosine_sim, df):
    idx = df.index[df['nombre'] == nombre_producto][0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11]
    product_indices = [i[0] for i in sim_scores]
    recommended_products = df.iloc[product_indices]
    return recommended_products[['nombre', 'imagen']]

"""## **Aplicacion de Streamlit**"""

st.title("Recomendaciones Ecommerce")

# Agrega el logo
url_imagen = "https://www.tu_ecommerce.com/logo.png"  # Reemplaza con la URL real de tu logo
st.image(url_imagen, width=200)  # Ajusta el ancho según sea necesario

# Lista desplegable de productos
productos = data['nombre'].tolist()
producto_seleccionado = st.selectbox("Selecciona un producto:", productos)

# Muestra las recomendaciones
if producto_seleccionado:
    recomendaciones = get_recommendations(producto_seleccionado, cosine_sim, data)
    st.subheader("Productos Recomendados:")
    for i, row in recomendaciones.iterrows():
        calificacion = data.loc[data['nombre'] == row['nombre'], 'calificacion'].values[0]
        st.write(f"{i+1}. {row['nombre']} (Calificación: {calificacion})")
        st.image(row['imagen'])  # Muestra la imagen usando la URL